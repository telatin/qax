
import os
import docopt
import strformat
import uuids
import ./qax_utils

type
  ArtifactProperties* = object
    uuid: string
    framework: string
    archive: int
    format: string
    artifactType: string
    append: string

proc newArtifactProperties(uuid, version, format, artifactType: string, archive: int, attributes: seq[string]): ArtifactProperties =
  result.uuid          = uuid
  result.framework     = version
  result.format        = format
  result.artifactType  = artifactType
  result.archive       = archive
  result.append        = ""
  for propPair in attributes:
    try:
      let 
        value  = propPair.split(":")
      result.append &= value[0] & " : " & value[1]
    except Exception as e:
      stderr.writeLine("Unable to create metadata: invalid attributes: ", e.msg)
      quit(1)

proc makeArtifact(uuid, tmpDir, outputFile: string): bool =

  let
    initialWorkDir   = getCurrentDir()
    outputAbsPath    = absolutePath(outputFile)

  # Change workdir
  try:
    setCurrentDir(tmpDir)
  except OSError as e:
    setCurrentDir(initialWorkDir)
    stderr.writeLine("ERROR: Unable to set working directory to: ", tmpDir)
    return false

  # Zip command
  try:
    let
      exitStatus = execShellCmd(fmt"zip -q -r {outputFile} {uuid}")
    if exitStatus != 0:
      setCurrentDir(initialWorkDir)
      stderr.writeLine("ERROR: zip command returned: ", exitStatus)
      return false
  except Exception as e:
    setCurrentDir(initialWorkDir)
    stderr.writeLine("ERROR: unable to execute zip command: ", e.msg)
    return false

  # Cleanup?

  setCurrentDir(initialWorkDir)
  return true


proc makeFile(text, destFile: string): bool =
  try:
    writeFile(destFile, text)
    return true
  except Exception as e:
    stderr.writeLine("ERROR: Unable to write temporary file: ", destFile)
    return false


proc makeDirectory(inputDir, tempDir: string, artifactAttributes: ArtifactProperties): bool =
  let
    tempUUID = joinPath(tempDir, artifactAttributes.uuid)
    versionFileText = fmt"""QIIME 2
archive: {artifactAttributes.archive}
framework: {artifactAttributes.framework}"""
    metadataFileText = fmt"""uuid: {artifactAttributes.uuid}
type: {artifactAttributes.artifactType}
format: {artifactAttributes.format}"""

  try:
    # make dir UUID
    if not dirExists(tempUUID):
      createDir(tempUUID)
    else:
      try:
        removeDir(tempUUID):
      except Exception as e:
        stderr.writeLine(fmt"Unable to remove temporary directory {tempUUID}: {e.msg}")
        return false

    # Copy
    copyDir(inputDir, joinPath(tempUUID, "data") )

    # Make temporary files
    if not makeFile(versionFileText,  joinPath(tempUUID, "VERSION")):
      return false
    if not makeFile(metadataFileText, joinPath(tempUUID, "metadata.yaml")):
      return false

    return true
  except Exception as e:
    return false

proc make(argv: var seq[string]): int =
    let env_temp = if len(getEnv("TMPDIR")) > 0: getEnv("TMPDIR")
                    elif len(getEnv("TMP")) > 0: getEnv("TMP")
                    else: "/tmp/"

    let args = docopt( format("""
Usage: make [options] -o <artifact.qzv> <inputdirectory>

Create a Qiime Visualization Artifact from a directory with a website,
that must contain a 'index.html' file at the root.

Options:
  -o, --output <FILE>    Output artifact (required)
  -u, --uuid <UUID>      Specify a UUID (otherwise autogenerated)
  -f, --force            Overwrite output artifact [default: true]
  -t, --tempdir <DIR>    Temporary directory [default: $env_temp]
  -v, --verbose          Verbose output
  -h, --help             Show this help

Attributes:
  --format <FORMAT>      Artifact format [default: HTML[Report]]
  --type <TYPE>          Artifact type [default: Visualization]
  --version <VERSION>    Artifact framework version [default: 2019.10.0]
  --archive <ARCHIVE>    Artifact archive version [default: 5]

  """ % ["env_temp", env_temp]), version=version(), argv=argv)

    verbose = args["--verbose"]
    var
      uuid : string

    let
      force = args["--force"]

    if $args["--uuid"] == "nil":
      uuid = $genUUID()
    else:
      try:
        discard parseUUID($args["--uuid"])
        uuid = $args["--uuid"]
      except ValueError as e:
        stderr.writeLine("ERROR: The provided UUID (", $args["--uuid"], ") is not a valid UUID4 code:\n  ", e.msg)
        quit(1)
      except Exception as e:
        stderr.writeLine("ERROR: Unable to parse the provided UUID4 code:\n  ", e.msg)
        quit(1)

    if verbose:
      stderr.writeLine("UUID:\t", uuid)
    # check that an input directory was provided and contains index.HTML
    if dirExists($args["<inputdirectory>"]):
      if true:
        let
          aVersion = $args["--version"]
          aFormat  = $args["--format"]
          aType    = $args["--type"]
          aArchive = parseInt($args["--archive"])
        
        if $args["--type"] == "Visualization" and  not fileExists(joinPath($args["<inputdirectory>"], "index.html")):
          stderr.writeLine("ERROR: The input directory does not contain <index.html>, required for --type ", $args["--type"])
          quit(1)         
        if verbose:
          stderr.writeLine("Input:\t", joinPath($args["<inputdirectory>"], "index.html") )
          stderr.writeLine("Temp:\t", $args["--tempdir"])
          stderr.writeLine(fmt"Version={aVersion};Format={aFormat};Archive={aArchive}")

        var
          attributes = @["creator: qax"]
          artifactAttributes = newArtifactProperties(uuid, aVersion, aFormat, aType, aArchive, attributes)

        # Make directory
        if makeDirectory($args["<inputdirectory>"], $args["--tempdir"], artifactAttributes):
          if verbose:
            stderr.writeLine(" * Temporary directory created")
        else:
          stderr.writeLine("ERROR: Unable to create temporary directory: ", $args["--tempdir"])
          quit(1)

        # Make artifact
        if makeArtifact(uuid, $args["--tempdir"], absolutePath($args["--output"])):
          if verbose:
            stderr.writeLine("Done:\t", $args["--output"])
        else:
          quit(1)
      else:
        stderr.writeLine("--")
        quit(1)

    else:
      stderr.writeLine("ERROR: Input directory not found (", $args["<inputdirectory>"], ")")
      quit(1)
